---
title: "Proportionate Mixing Vaccination"
format: html
editor: visual
---

## Setup

```{r}
#| echo: false

library(tidyverse)
library(boot)
library(cowplot)

#natsal=read.delim("../UKDA-7799-tab/tab/eul_natsal_2010_for_archive.tab")
natsal = read.delim("~/OneDrive - University of Bristol/Shared Documents/MPox/UKDA-7799-tab/tab/eul_natsal_2010_for_archive.tab")
natsal %>%
  select(sin2,total_wt,dage,hhsize,het1yr,sam1yr,sam5yrs) -> RRdata


attackrate = c(0.12,0.12,0.013) #from Packer et al. 
mult1=1
myinterval=0.95


RRdata %>%
  filter(sam1yr <100 & het1yr<100 & hhsize<100) %>%
  mutate(vaccineeffect = 1) %>%
  mutate(indR = vaccineeffect*attackrate[1]*sam1yr + 
           vaccineeffect*attackrate[2]*het1yr + 
           vaccineeffect*attackrate[3]*hhsize) -> RRdata

RRdata %>%
  filter(sam5yrs>0) -> MSM

myweightedmean=function(DD,ix)
{
  return(sum(DD[ix,2]*DD[ix,1]^2)/sum(DD[ix,1]*DD[ix,2]))
}

myweightedmeanvac=function(DD,ix)
{
  #return(sum(DD[ix,1]*DD[ix,2])/sum(DD[ix,1]*DD[ix,3]))
  return(sum(DD[ix,1]*DD[ix,2]))
}

```

## Figure 1

```{r}
#| echo: false
#| eval: false
# buildup to figure 1

RRdata %>%
  mutate(PropSameSex=sam1yr/(sam1yr + het1yr))%>% # some NANs for people with no sexual contacts 
  mutate(PropSameSex = ifelse(is.na(PropSameSex),0,PropSameSex)) %>%
  mutate(MoreThanHalf= ifelse(PropSameSex<0.5,'Mainly opposite sex contacts','Mainly same sex contacts'))%>% 
  #mutate(MoreThanHalf = ifelse(NA,"Household contacts only",MoreThanHalf)) %>%
  ggplot(aes(x=indR,fill = MoreThanHalf)) + 
  geom_histogram(aes(y=..density..),binwidth = 0.05,position= position_dodge()) + 
  xlab('Individual reproduction numbers') + 
  #scale_x_continuous(trans='sqrt') + 
  scale_x_log10()+
  ylab('Density')+
  theme_minimal_grid()

RRdata %>%
  mutate(PropSameSex=sam1yr/(sam1yr + het1yr))%>% # some NANs for people with no sexual contacts 
  mutate(PropSameSex = ifelse((sam1yr + het1yr)==0,-1,PropSameSex)) %>%
  mutate(MoreThanHalf= ifelse(PropSameSex==-1,"Household contacts only",ifelse(PropSameSex<0.5,'Mainly opposite sex contacts','Mainly same sex contacts')))%>%
  ggplot(aes(x=indR,fill = MoreThanHalf)) + 
  geom_histogram(aes(y=..density..),binwidth = 0.05,position= position_dodge()) + 
  geom_vline(xintercept = 1) + 
  xlab('Individual reproduction numbers') + 
  #scale_x_continuous(trans='sqrt') + 
  scale_x_log10()+
  ylab('Density')+
  theme_minimal_grid() + 
  theme(legend.justification=c(0,0), legend.position=c(0.73,0.85),
        legend.title=element_blank(),legend.background =  element_rect(fill="white", size=2, linetype="dotted"))
#theme(legend.position = "top",legend.title=element_blank()) 


```

### Figure 1 Clade IIb

```{r}

RRdata %>%
  mutate(PropSameSex=sam1yr/(sam1yr + het1yr))%>% # some NANs for people with no sexual contacts 
  mutate(PropSameSex = ifelse((sam1yr + het1yr)==0,-1,PropSameSex)) %>%
  mutate(MoreThanHalf= ifelse(PropSameSex==-1,"Household contacts only",
                              ifelse(PropSameSex<0.5,'Mainly opposite sex contacts',
                                     'Mainly same sex contacts')))%>%
  mutate(MoreThanHalf= case_when((sam1yr==0 & het1yr==0) ~ "Household contacts only",
                                 (sam1yr>0 & het1yr==0) ~ "Same-sex contacts only",
                                 (sam1yr==0 & het1yr>0) ~ "Opposite-sex contacts only",
                                 (sam1yr>0 & het1yr>0 & PropSameSex<0.5) ~ 'Mainly opposite-sex contacts',
                                 (sam1yr>0 & het1yr>0 & PropSameSex>=0.5) ~ 'Mainly same-sex contacts') )%>%
  mutate(MoreThanHalf = fct_reorder(MoreThanHalf,indR)) %>%
  ggplot(aes(x=indR,fill = MoreThanHalf)) + 
  geom_histogram(aes(y=..density..),binwidth = 0.05,position= position_dodge()) + 
  geom_vline(xintercept = 1) + 
  xlab('Individual reproduction numbers') + 
  #scale_x_continuous(trans='sqrt') + 
  scale_x_log10()+
  ylab('Density')+
  facet_grid(MoreThanHalf~.,labeller = label_wrap_gen(width=9))+
  theme_bw() + 
  theme(legend.position="none",strip.background = element_rect(
    color="black", fill=c("lightgray"), size=1, linetype="solid"),
    strip.text.y = element_text(size = 10))
```

### Figure 1: Clade 1B

Household attack rate x10.

```{r}

attackrate = c(0.12,0.12,0.12) #from Packer et al; with household attack rate up x10. 


RRdata %>%
  filter(sam1yr <100 & het1yr<100 & hhsize<100) %>%
  mutate(vaccineeffect = 1) %>%
  mutate(indR = vaccineeffect*attackrate[1]*sam1yr + vaccineeffect*attackrate[2]*het1yr + vaccineeffect*attackrate[3]*hhsize) -> RRdata


RRdata %>%
  mutate(PropSameSex=sam1yr/(sam1yr + het1yr))%>% # some NANs for people with no sexual contacts 
  mutate(PropSameSex = ifelse((sam1yr + het1yr)==0,-1,PropSameSex)) %>%
  mutate(MoreThanHalf= ifelse(PropSameSex==-1,"Household contacts only",
                              ifelse(PropSameSex<0.5,'Mainly opposite sex contacts',
                                     'Mainly same sex contacts')))%>%
  mutate(MoreThanHalf= case_when((sam1yr==0 & het1yr==0) ~ "Household contacts only",
                                 (sam1yr>0 & het1yr==0) ~ "Same-sex contacts only",
                                 (sam1yr==0 & het1yr>0) ~ "Opposite-sex contacts only",
                                 (sam1yr>0 & het1yr>0 & PropSameSex<0.5) ~ 'Mainly opposite-sex contacts',
                                 (sam1yr>0 & het1yr>0 & PropSameSex>=0.5) ~ 'Mainly same-sex contacts') )%>%
  mutate(MoreThanHalf = fct_reorder(MoreThanHalf,indR)) %>%
  ggplot(aes(x=indR,fill = MoreThanHalf)) + 
  geom_histogram(aes(y=..density..),binwidth = 0.05,position= position_dodge()) + 
  geom_vline(xintercept = 1) + 
  xlab('Individual reproduction numbers') + 
  #scale_x_continuous(trans='sqrt') + 
  scale_x_log10()+
  ylab('Density')+
  facet_grid(MoreThanHalf~.,labeller = label_wrap_gen(width=9))+
  theme_bw() + 
  theme(legend.position="none",strip.background = element_rect(
    color="black", fill=c("lightgray"), size=1, linetype="solid"),
    strip.text.y = element_text(size = 10))


```

### New vaccination calculations with proportionate mixing

```{r}
#RRdata %>%
#  filter(sam5yrs>0) %>% 
#  mutate(totalcontacts = het1yr+sam1yr) %>% 
#  mutate(propsame = sam1yr/totalcontacts)->MSM


natsal %>%
  filter(sam5yrs>0) %>% 
  mutate(totalcontacts = het1yr+sam1yr) %>% 
  filter(sam1yr <100 & het1yr<100 & hhsize<100)  |>
  mutate(propsame = sam1yr/totalcontacts)->MSM

attackrate = c(0.12,0.12,0.12) #from Packer et al; with household attack rate up x10. 



VI = 0.3 # testing
VT = 0.0

CalculateIndR_old <- function(contacts = MSM,probvac1=0.0, VI = 0.3, VT = 0.0)
{
  contacts |> 
    mutate(probvac = probvac1) |> 
    mutate(Rvac = (1-VT)*( (1-probvac) + probvac*(1-VI))*
                          (attackrate[1]*sam1yr + 
                           attackrate[2]*het1yr + 
                           attackrate[3]*hhsize)) |> 
    mutate(Runvac = ((1-probvac) + probvac*(1-VI))*
                      (attackrate[1]*sam1yr + 
                       attackrate[2]*het1yr + 
                       attackrate[3]*hhsize)) |> 
    mutate(indR = probvac*Rvac + (1-probvac)*Runvac) |> 
    mutate(indRsquared = probvac*Rvac*Rvac + (1-probvac)*Runvac*Runvac) -> tmp
  return(tmp)
}

CalculateIndR <- function(MSM,
                          probvac1=0.0,
                          VI=0.0,
                          VT=0.0,
                          SameSexSAR = 0.12,
                          HeteroSAR = 0.12,
                          HouseholdSAR = 0.12)
{
  #if(!is.null(probvac1)){MSM$probvac=probvac1}
  #print(probvac1)
  attackrate = c(SameSexSAR,HeteroSAR,HouseholdSAR) 
  MSM %>%
    mutate(probvac = probvac1) %>%
    mutate(degree = sam1yr + het1yr + hhsize) %>%
    mutate(degreedenom = sum(total_wt*degree)) %>%
    mutate(ci = total_wt*degree/degreedenom) %>%
    mutate(wi_vac = probvac) %>%
    mutate(wi_unvac = (1-probvac)) %>%
    
    mutate(wi_vac = probvac) %>%
    mutate(wi_unvac = (1-probvac)) %>%
    mutate(ci_vac = (1-VI)*ci) %>%
    mutate(ci_unvac = ci) %>%
    mutate(totalAR = attackrate[1]*sam1yr + attackrate[2]*het1yr + attackrate[3]*hhsize) %>%
    mutate(Ri_vac = (1-VT)*totalAR) %>%
    mutate(Ri_unvac = totalAR)%>%
    mutate(Rsquared = Ri_unvac*ci_unvac)%>%
    mutate(Rsquared2 = Ri_vac*ci_vac)-> tmp
  return(tmp)
}







#CalcPopRvacRandom_Old <- function(contacts, 
#                              probvac, 
#                              VI, 
#                              VT,
#                              bootRepeats = 1000) 
#{
#  MSM = CalculateIndR(contacts, probvac1=probvac, VI = VI, VT = VT)
#  rindvac = cbind(MSM$total_wt,MSM$indRsquared,MSM$indR)
#  myboot = boot(rindvac,statistic=myweightedmeanvac,R=bootRepeats)
#  tmp = tibble(Mean = mean(myboot$t),
#               Lower = quantile(myboot$t,0.025,na.rm = TRUE),
#               Upper = quantile(myboot$t,0.975,na.rm = TRUE)) 
##
#
#  return(tmp)
#}



CalcRvac <- function(MSM)
{
  rindvac=cbind(MSM$Rsquared2,MSM$wi_vac)
  rindunvac = cbind(MSM$Rsquared,MSM$wi_unvac)
  rind = rbind(rindvac,rindunvac)
  myboot=boot(rind,statistic=myweightedmeanvac,R=1000)
  tmp = tibble(Mean = mean(myboot$t),
               Lower = quantile(myboot$t,0.025,na.rm = TRUE),
               Upper = quantile(myboot$t,0.975,na.rm = TRUE)) 
  return(tmp)
}


CalcPopRvacRandom <- function(contacts, 
                              probvac, 
                              VI, 
                              VT,
                              SameSexSAR = 0.12,
                              HeteroSAR = 0.12,
                              HouseholdSAR = 0.12
                              ) 
{
  
  MSM = CalculateIndR(contacts, 
                      probvac1=probvac-5/100, 
                      VI = VI, VT = VT, HouseholdSAR = HouseholdSAR)
  tmp = CalcRvac(MSM)
  return(tmp)
}



CalcPopRvacTargetted <- function(contacts=MSM, 
                                 PropVac, 
                                 VI, 
                                 VT,
                                 SameSexSAR = 0.12,
                                 HeteroSAR = 0.12,
                                 HouseholdSAR = 0.12) 
{

  #targetvac = rep(1-exp(-PropVac^(contacts$totalcontacts^0.5)),length.out=length(contacts$totalcontacts))

  #numbervaccinated = sum(targetvac*contacts$total_wt)
  N=sum(contacts$total_wt) #total number of people (we want i/100 to be vaccinated)
  num2vac = N*PropVac

  n2v=num2vac
  probvac2 = rep(0,length(MSM$total_wt))
  while(n2v>1)
  {
    targetvac = (MSM$totalcontacts*MSM$total_wt)
    targetvac[which(probvac2>=1)]=0
    who = rmultinom(1,size=n2v,prob=targetvac)
    probvac3 = who/MSM$total_wt
    probvac3[is.na(probvac3)]=0
    probvac3[probvac3>1]=1
    numbervaccinated = sum(probvac3*MSM$total_wt)
    n2v = n2v - numbervaccinated
    probvac2 = apply(cbind(probvac2,probvac3),MARGIN=1,FUN=max)
  }
  numremaining=num2vac-n2v
  probvac <- probvac2
  
    
  MSM = CalculateIndR(contacts, probvac1=probvac, VI = VI, VT = VT, 
                      HouseholdSAR = HouseholdSAR)
  tmp = CalcRvac(MSM)
  return(tmp)
}
```

```{r}

#deltaX = seq(100,0,-5)
#RpopMSM_target=matrix(NA,nrow=length(deltaX),ncol=3)
#RpopMSM_random=matrix(NA,nrow=length(deltaX),ncol=3)

#j=1
#for(i in deltaX)# loop over proportion vaccinated
  
VaxPropDF = as_tibble(seq(0,100,5))|>rename(ProportionVaccinated = value)

VaxPropDF|>
  mutate(tmp =  map(ProportionVaccinated/100,
                    ~CalcPopRvacRandom(probvac=.x,contacts = MSM, VI = 0.8, VT = 0.8)))|> 
  unnest(cols = c(tmp)) |> 
  mutate(Type = "Non-targeted")->VaxPropPopRRandom
  

VaxPropDF|>
  mutate(tmp =  map(ProportionVaccinated/100,
                    ~CalcPopRvacTargetted(PropVac=.x,contacts = MSM,VI = 0.8, VT = 0.8))) |> 
  unnest(cols = c(tmp)) |> 
  mutate(Type = "Targetted")->VaxPropPopRTargetted
 
bind_rows(VaxPropPopRRandom,VaxPropPopRTargetted)|> 
  ggplot(aes(x = ProportionVaccinated))+
  geom_ribbon(aes(ymin = Lower, ymax = Upper,colour = Type,fill = Type), alpha = 0.4)



```

So that works for individual VI, VT. Now to write wrapper functions around VI and VT.

```{r}
# set VI VT to default to 0.8
GenerateRibbonsVInfectionVTransmission <- function(VI=0.8, VT=0.8, HouseholdSAR = 0.12){
  VaxPropDF = as_tibble(seq(0,100,5))|>rename(ProportionVaccinated = value)
  
  VaxPropDF|>
    mutate(tmp =  map(ProportionVaccinated/100,
                    ~CalcPopRvacRandom(probvac=.x,contacts = MSM, VI = VI, VT = VT, HouseholdSAR = 0.12))) |> 
    unnest(cols = c(tmp)) |> 
    mutate(Type = "Non-targeted") ->VaxPropPopRRandom 
  
  #|> 
  #  mutate(VI = VI,VT = VT)->VaxPropPopRRandom
  
  VaxPropDF|>
    mutate(tmp =  map(ProportionVaccinated/100,
                    ~CalcPopRvacTargetted(PropVac=.x,contacts = MSM, VI = VI, VT = VT, HouseholdSAR = 0.12))) |> 
    unnest(cols = c(tmp)) |> 
    mutate(Type = "Targeted") ->VaxPropPopRTargetted
    #|> 
    #mutate(VI = VI, VT = VT)->VaxPropPopRTargetted
 
  return(bind_rows(VaxPropPopRRandom,VaxPropPopRTargetted))
}



GenerateRibbonsVInfectionVTransmission(VI = 0, VT = 0.99)->VIVTLoop

VIVTLoop |> 
  ggplot(aes(x = ProportionVaccinated))+
  geom_ribbon(aes(ymin = Lower, ymax = Upper,colour = Type,fill = Type), alpha = 0.4)

#works

```

```{r}
# without parallelising for testing (AVOID)
#expand_grid(VI = seq(0.0,1,0.2),VT = seq(0.0,1,0.2))

#expand_grid(VI = c(0.0,0.1,0.4,0.7,0.9,1),VT = c(0.0,0.1,0.4,0.7,0.9,1)) |> 
#  mutate(tmp = map2(VI,VT,~GenerateRibbonsVInfectionVTransmission(.x,.y))) |> 
#  unnest() ->RibbonsVIVT

expand_grid(VI = c(0.1,0.4),VT = c(0.1,0.4)) |> 
  mutate(tmp = map2(VI,VT,~GenerateRibbonsVInfectionVTransmission(.x,.y))) |>
  unnest(cols = c(tmp)) ->RibbonsVIVT

RibbonsVIVT |> 
  ggplot(aes(x = ProportionVaccinated))+
  geom_ribbon(aes(ymin = Lower, ymax = Upper,colour = Type,fill = Type), alpha = 0.4) +
  geom_hline(yintercept = 1)+
  facet_grid(VI~VT,labeller = 'label_both')

```

## Figure 3

```{r}
# parallelising. 

library(purrr)
library(furrr)

plan(multisession, workers = 12)
options = furrr_options(seed=TRUE)
VESweep = c(0,0.2,0.5,0.8,0.95)

expand_grid(VI = VESweep,VT = VESweep) |> 
  mutate(tmp = future_map2(VI,VT,~GenerateRibbonsVInfectionVTransmission(.x,.y),.options = options)) |> 
  unnest(cols = c(tmp)) ->RibbonsVIVT

RibbonsVIVT |> 
  ggplot(aes(x = ProportionVaccinated))+
  geom_ribbon(aes(ymin = Lower, ymax = Upper,colour = Type,fill = Type), alpha = 0.4) +
  geom_hline(yintercept = 1,linewidth = 0.6)+
  facet_grid(VI~VT,labeller = 'label_both')+
  theme_bw() + 
  theme(legend.position="none",strip.background = element_rect(
    color="black", fill=c("lightgray"), linewidth=0.4, linetype="solid"),
    strip.text.y = element_text(size = 10))+
  xlab('Vaccine Coverage (%)')+
  ylab('Reproduction Number')



```

## Figure 2

```{r}


ExtractVaxBands = function(dataDF = RMSMCIIb.df){ 
  dataDF |> 
    slice_min(abs(1-Mean),n=3, by = 'Type') %>% # extract R closest to 1
    select(ProportionVaccinated,Type) %>% 
    group_by(Type) %>% 
    mutate(Lower=min(ProportionVaccinated),Upper=max(ProportionVaccinated)) %>% 
    filter(ProportionVaccinated == median(ProportionVaccinated))->VaxBands
  return(VaxBands)
}

GGPlotVaxRibbons = function(dataDF = RMSMCIIb.df){
  VaxBands = ExtractVaxBands(dataDF)
  dataDF|>
    ggplot(aes(x=ProportionVaccinated,ymin = Lower,ymax=Upper,fill=Type))+
    geom_ribbon(alpha = 0.4) +
    geom_hline(yintercept=1,linetype='dotted')+
    geom_rect(data=VaxBands %>% filter(Type=='Random'),aes(xmin=Lower,xmax=Upper,ymin=0,ymax=Inf), colour = 'grey',alpha=0.1)+
    geom_rect(data=VaxBands %>% filter(Type=='Targetted'),aes(xmin=Lower,xmax=Upper,ymin=0,ymax=Inf),colour = 'grey',alpha=0.1)+
    ylab('R in individuals with same sex partnerships')+
    xlab('% Vaccinated')+
    theme_bw()->p
  p
  return(p)
}






```

```{r}

library(patchwork)
CladeIIb.df = GenerateRibbonsVInfectionVTransmission(HouseholdSAR = 0.013)

CladeIb.df = GenerateRibbonsVInfectionVTransmission(HouseholdSAR = 0.013 * 10)

CladeI20 = GenerateRibbonsVInfectionVTransmission(HouseholdSAR = 0.2)

CladeI40 = GenerateRibbonsVInfectionVTransmission(HouseholdSAR = 0.4)

CladeIb50 = GenerateRibbonsVInfectionVTransmission(HouseholdSAR = 0.5)




```
